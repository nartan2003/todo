<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>My To‑Do — Lightning</title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
  <style>
    :root{
      --bg: #0b1020;
      --card: rgba(255,255,255,0.06);
      --muted: #a6adbb;
      --text: #eef2ff;
      --brand: #7c7cff;
      --brand-2: #5de1e6;
      --ok: #39d98a;
      --warn: #f4c15d;
      --danger: #ff6b6b;
      --border: rgba(255,255,255,0.12);
      --shadow: 0 10px 30px rgba(0,0,0,.35), inset 0 1px 0 rgba(255,255,255,.06);
      --radius: 18px;
    }
    *{box-sizing:border-box}
    html,body{height:100%}
    body{
      margin:0; font-family: Inter, system-ui, -apple-system, Segoe UI, Roboto, sans-serif;
      background: radial-gradient(1200px 600px at 20% -10%, #162037 0%, transparent 60%),
                  radial-gradient(1000px 700px at 120% 0%, #0b2840 0%, transparent 50%),
                  var(--bg);
      color: var(--text);
      letter-spacing:.2px;
    }
    .app{ max-width:1100px; margin: 32px auto; padding: 0 20px; }
    header{
      display:flex; align-items:center; gap:16px; justify-content:space-between; margin-bottom:18px;
    }
    .title{
      display:flex; align-items:center; gap:14px;
    }
    .logo{
      width:44px; height:44px; border-radius:14px; background: linear-gradient(135deg, var(--brand), var(--brand-2));
      display:grid; place-items:center; box-shadow: var(--shadow);
    }
    .logo span{font-weight:800; font-size:20px; color:#0a0f1e}
    h1{ font-size: clamp(20px, 3vw, 28px); margin:0; }
    .sub{ color: var(--muted); font-size: 13px; margin-top:4px }

    .row{ display:flex; gap:14px; align-items:center; }

    .stats{
      display:grid; grid-template-columns: repeat(4, minmax(140px,1fr)); gap:14px; margin: 18px 0 22px;
    }
    .card{ background: var(--card); border:1px solid var(--border); border-radius: var(--radius); box-shadow: var(--shadow); backdrop-filter: blur(10px); }
    .mini{ padding:14px; }
    .mini h3{ margin:0; font-size:12px; color: var(--muted); font-weight:600; }
    .mini .num{ font-size:22px; margin-top:6px; font-weight:800; }
    .bar{ height:8px; background: rgba(255,255,255,.06); border-radius:999px; overflow:hidden; margin-top:10px; border:1px solid var(--border)}
    .bar>i{ display:block; height:100%; width:0%; background: linear-gradient(90deg, var(--brand), var(--brand-2)); }

    .controls{ display:grid; grid-template-columns: 1.2fr 2fr .9fr .9fr .6fr auto; gap:10px; align-items:end; }
    label{font-size:12px; color: var(--muted); display:block; margin: 2px 2px 6px}
    input[type="text"], input[type="date"], select, textarea{
      width:100%; padding:12px 12px; border-radius:14px; background:#0e162b; color:var(--text);
      border:1px solid var(--border); outline:none; transition:.2s border-color, .2s background;
    }
    textarea{ min-height:46px; resize: vertical; }
    input::placeholder, textarea::placeholder{ color:#8d94a7 }
    input:focus, select:focus, textarea:focus{ border-color: var(--brand) }

    .btn{ appearance:none; border:1px solid var(--border); background:#0f1830; color:var(--text);
      padding:12px 14px; border-radius:14px; cursor:pointer; font-weight:600; box-shadow: var(--shadow); transition:.2s transform, .2s opacity, .2s background;
    }
    .btn:hover{ transform: translateY(-1px) }
    .btn.primary{ background: linear-gradient(135deg, var(--brand), var(--brand-2)); color:#0a0f1e; border: none }
    .btn.ghost{ background: transparent }

    .toolbar{ display:flex; gap:10px; align-items:center; margin:18px 0 }
    .tabs{ display:flex; background: #0e162b; border:1px solid var(--border); border-radius:14px; padding:4px; }
    .tab{ padding:8px 12px; border-radius:10px; font-weight:600; font-size:13px; color:var(--muted); cursor:pointer }
    .tab.active{ color:#0a0f1e; background: linear-gradient(135deg, var(--brand), var(--brand-2)); }

    .search{
      flex:1; display:flex; align-items:center; gap:8px; padding:10px 12px; border-radius:14px; border:1px solid var(--border);
      background:#0e162b;
    }
    .search input{ background:transparent; border:none; outline:none; color:var(--text); width:100% }

    .list{ display:grid; gap:10px; }

    .task{ display:grid; grid-template-columns: auto 1fr auto auto; gap:10px; align-items:stretch; padding:12px; }
    .task + .task{ border-top: 1px solid var(--border) }
    .task:hover{ background: rgba(255,255,255,0.02); border-radius:14px }
    .left{ display:flex; align-items:flex-start; gap:12px }
    .check{ width:22px; height:22px; border-radius:8px; border:1px solid var(--border); background:#0f1830; display:grid; place-items:center; cursor:pointer }
    .check.done{ background: linear-gradient(135deg, var(--brand), var(--brand-2)); border: none }
    .titleline{ display:flex; align-items:center; gap:10px; }
    .pill{ font-size:11px; padding:4px 8px; border-radius:999px; border:1px solid var(--border); color:var(--muted) }
    .pill.prio-high{ border-color: var(--danger); color: #ff9a9a }
    .pill.prio-medium{ border-color: var(--warn); color: #ffe09a }
    .pill.prio-low{ border-color: var(--ok); color: #a5f3c6 }

    .meta{ color: var(--muted); font-size:12px; margin-top:6px }
    .due.overdue{ color: #ff9a9a }

    .actions{ display:flex; gap:8px }
    .iconbtn{ width:36px; height:36px; display:grid; place-items:center; border-radius:12px; border:1px solid var(--border); background:#0f1830; cursor:pointer }
    .iconbtn:hover{ transform: translateY(-1px) }

    .empty{ text-align:center; padding:34px; color: var(--muted) }

    dialog{ border:none; border-radius:18px; width:min(720px, 92vw); background:#0c1429; color:var(--text); padding:0; box-shadow: 0 20px 60px rgba(0,0,0,.5) }
    dialog::backdrop{ background: rgba(0,0,0,.6) }
    .dlg-head{ padding:16px 18px; border-bottom:1px solid var(--border); display:flex; justify-content:space-between; align-items:center }
    .dlg-body{ padding:18px }

    .report-grid{ display:grid; grid-template-columns: repeat(3, 1fr); gap:12px }
    .report-item{ padding:14px; border-radius:14px; border:1px solid var(--border); background:#0f1830 }
    .report-item h4{ margin:0; font-size:12px; color:var(--muted) }
    .report-item .big{ font-size:26px; font-weight:800; margin-top:6px }
    canvas{ width:100%; height:180px }

    @media (max-width: 880px){
      .controls{ grid-template-columns: 1fr 1fr .9fr .9fr .8fr auto }
    }
    @media (max-width: 680px){
      header{ flex-direction:column; align-items:flex-start }
      .controls{ grid-template-columns: 1fr 1fr; }
      .toolbar{ flex-direction: column; align-items: stretch }
      .stats{ grid-template-columns: 1fr 1fr }
      .task{ grid-template-columns: auto 1fr auto; }
      .actions .iconbtn.hide-sm{ display:none }
    }
  </style>
</head>
<body>
  <div class="app">
    <header>
      <div class="title">
        <div class="logo"><span>✓</span></div>
        <div>
          <h1>Lightning To‑Do</h1>
          <div class="sub" id="todayLine">Make today count.</div>
        </div>
      </div>
      <div class="row">
        <button class="btn ghost" id="exportBtn" title="Export tasks as JSON">Export</button>
        <input type="file" id="importFile" accept="application/json" hidden />
        <button class="btn" id="importBtn" title="Import tasks from JSON">Import</button>
        <button class="btn primary" id="reportBtn">Daily Report</button>
      </div>
    </header>

    <section class="stats">
      <div class="card mini">
        <h3>Tasks Today</h3>
        <div class="num" id="statToday">0</div>
      </div>
      <div class="card mini">
        <h3>Completed Today</h3>
        <div class="num" id="statDone">0</div>
      </div>
      <div class="card mini">
        <h3>Pending Today</h3>
        <div class="num" id="statPending">0</div>
      </div>
      <div class="card mini">
        <h3>Completion Rate</h3>
        <div class="bar"><i id="barFill"></i></div>
      </div>
    </section>

    <section class="card" style="padding:16px;">
      <div class="controls">
        <div>
          <label>Task Title</label>
          <input id="titleInput" type="text" placeholder="e.g., Finish React assignment" />
        </div>
        <div>
          <label>Description</label>
          <input id="descInput" type="text" placeholder="Optional details" />
        </div>
        <div>
          <label>Due Date</label>
          <input id="dateInput" type="date" />
        </div>
        <div>
          <label>Priority</label>
          <select id="prioInput">
            <option value="low">Low</option>
            <option value="medium" selected>Medium</option>
            <option value="high">High</option>
          </select>
        </div>
        <div>
          <label>Category</label>
          <input id="catInput" type="text" placeholder="Work, Health, Study…" />
        </div>
        <div>
          <button class="btn primary" id="addBtn">Add Task</button>
        </div>
      </div>

      <div class="toolbar">
        <div class="tabs" id="tabs">
          <div class="tab active" data-view="all">All</div>
          <div class="tab" data-view="today">Today</div>
          <div class="tab" data-view="pending">Pending</div>
          <div class="tab" data-view="completed">Completed</div>
        </div>
        <div class="search">
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path d="M21 21L16.65 16.65M19 11C19 15.4183 15.4183 19 11 19C6.58172 19 3 15.4183 3 11C3 6.58172 6.58172 3 11 3C15.4183 3 19 6.58172 19 11Z" stroke="currentColor" stroke-width="1.6" stroke-linecap="round" stroke-linejoin="round"/></svg>
          <input id="searchInput" type="text" placeholder="Search title, description, category…" />
        </div>
        <button class="btn ghost" id="clearCompletedBtn" title="Remove all completed tasks">Clear Completed</button>
      </div>

      <div class="list" id="list"></div>
      <div class="empty" id="emptyState" style="display:none">No tasks here yet. Add your first task above for Nartan</div>
    </section>
  </div>

  <dialog id="reportDlg">
    <div class="dlg-head">
      <strong>Daily Report</strong>
      <button class="btn ghost" id="closeReport">Close</button>
    </div>
    <div class="dlg-body">
      <div class="report-grid">
        <div class="report-item"><h4>Date</h4><div class="big" id="repDate">—</div></div>
        <div class="report-item"><h4>Created Today</h4><div class="big" id="repCreated">0</div></div>
        <div class="report-item"><h4>Completed Today</h4><div class="big" id="repCompleted">0</div></div>
      </div>
      <div class="report-grid" style="margin-top:12px">
        <div class="report-item"><h4>Pending (Due Today)</h4><div class="big" id="repPendingDue">0</div></div>
        <div class="report-item"><h4>Overdue</h4><div class="big" id="repOverdue">0</div></div>
        <div class="report-item"><h4>Completion Rate Today</h4><div class="big" id="repRate">0%</div></div>
      </div>
      <div class="card" style="margin-top:14px; padding:14px">
        <h4 style="margin:2px 0 10px; color: var(--muted)">Today Timeline</h4>
        <canvas id="repChart" width="600" height="200"></canvas>
      </div>
    </div>
  </dialog>

  <template id="taskTpl">
    <div class="task">
      <div class="left">
        <div class="check" data-act="toggle"></div>
        <div>
          <div class="titleline">
            <div class="t-title" style="font-weight:700"></div>
            <span class="pill prio">Priority</span>
            <span class="pill cat" style="display:none"></span>
          </div>
          <div class="t-desc meta"></div>
          <div class="meta">
            <span class="due">Due: <b class="due-date">—</b></span>
            <span class="created" style="margin-left:10px">Added: <b class="created-at">—</b></span>
          </div>
        </div>
      </div>
      <div class="pill status" style="align-self:center">Pending</div>
      <div class="pill" style="align-self:center" data-el="age">—</div>
      <div class="actions">
        <button class="iconbtn" title="Edit" data-act="edit">✎</button>
        <button class="iconbtn hide-sm" title="Duplicate" data-act="dup">⎘</button>
        <button class="iconbtn" title="Delete" data-act="del">🗑</button>
      </div>
    </div>
  </template>

  <script>
    const $ = sel => document.querySelector(sel);
    const $$ = sel => Array.from(document.querySelectorAll(sel));

    const storeKey = 'nt_todo_v1';
    let tasks = JSON.parse(localStorage.getItem(storeKey) || '[]');
    let view = 'all';
    let q = '';

    const pad = n => String(n).padStart(2,'0');
    const fmtDate = d => `${d.getFullYear()}-${pad(d.getMonth()+1)}-${pad(d.getDate())}`;
    const fromISODate = s => { const [y,m,da] = s.split('-').map(Number); return new Date(y, m-1, da); };

    function todayISO(){ return fmtDate(new Date()); }
    function isToday(dateStr){ return dateStr === todayISO(); }

    function save(){ localStorage.setItem(storeKey, JSON.stringify(tasks)); }

    function addTask(){
      const title = $('#titleInput').value.trim();
      if(!title){ $('#titleInput').focus(); return; }
      const t = {
        id: crypto.randomUUID(),
        title,
        desc: $('#descInput').value.trim(),
        due: $('#dateInput').value || todayISO(),
        prio: $('#prioInput').value,
        cat: $('#catInput').value.trim(),
        createdAt: new Date().toISOString(),
        completedAt: null,
        done: false
      };
      tasks.unshift(t);
      save();
      clearInputs();
      render();
    }

    function clearInputs(){
      $('#titleInput').value = '';
      $('#descInput').value = '';
      $('#dateInput').value = '';
      $('#prioInput').value = 'medium';
      $('#catInput').value = '';
    }

    function toggleTask(id){
      const t = tasks.find(x=>x.id===id); if(!t) return;
      t.done = !t.done;
      t.completedAt = t.done ? new Date().toISOString() : null;
      save(); render();
    }

    function delTask(id){ tasks = tasks.filter(x=>x.id!==id); save(); render(); }

    function dupTask(id){
      const t = tasks.find(x=>x.id===id); if(!t) return;
      const copy = { ...t, id: crypto.randomUUID(), createdAt: new Date().toISOString(), completedAt: null, done:false };
      tasks.unshift(copy); save(); render();
    }

    function editTask(id){
      const t = tasks.find(x=>x.id===id); if(!t) return;
      const nt = prompt('Edit title', t.title); if(nt===null) return; t.title = nt.trim()||t.title;
      const nd = prompt('Edit description', t.desc); if(nd===null) return; t.desc = nd.trim();
      const ndue = prompt('Edit due date (YYYY-MM-DD)', t.due); if(ndue===null) return; if(/^\d{4}-\d{2}-\d{2}$/.test(ndue)) t.due = ndue;
      const nprio = prompt('Edit priority (low/medium/high)', t.prio); if(nprio!==null && ['low','medium','high'].includes(nprio)) t.prio = nprio;
      const ncat = prompt('Edit category', t.cat); if(ncat!==null) t.cat = ncat.trim();
      save(); render();
    }

    function clearCompleted(){ tasks = tasks.filter(t=>!t.done); save(); render(); }

    function ageLabel(due){
      const now = new Date();
      const dd = fromISODate(due);
      const diff = Math.floor((dd - new Date(now.getFullYear(),now.getMonth(),now.getDate()))/86400000);
      if(diff===0) return 'Due today';
      if(diff>0) return `${diff} day${diff>1?'s':''} left`;
      const a = Math.abs(diff); return `Overdue ${a} day${a>1?'s':''}`;
    }

    function render(){
      // header line
      const now = new Date();
      $('#todayLine').textContent = now.toLocaleDateString(undefined, { weekday:'long', month:'short', day:'numeric' });

      const listEl = $('#list'), empty = $('#emptyState');
      listEl.innerHTML = '';

      // filter
      let viewTasks = tasks.filter(t=>{
        if(q){
          const s = (t.title+' '+t.desc+' '+t.cat).toLowerCase();
          if(!s.includes(q.toLowerCase())) return false;
        }
        if(view==='today'){
          return t.due === todayISO();
        } else if(view==='pending'){
          return !t.done;
        } else if(view==='completed'){
          return t.done;
        }
        return true;
      });

      if(viewTasks.length===0){ empty.style.display='block'; }
      else { empty.style.display='none'; }

      for(const t of viewTasks){
        const tpl = $('#taskTpl').content.cloneNode(true);
        const root = tpl.querySelector('.task');
        const chk = tpl.querySelector('.check');
        chk.classList.toggle('done', t.done);
        tpl.querySelector('.t-title').textContent = t.title;
        const pr = tpl.querySelector('.prio'); pr.textContent = `P: ${t.prio}`; pr.classList.remove('prio-low','prio-medium','prio-high'); pr.classList.add(`prio-${t.prio}`);
        const cat = tpl.querySelector('.cat'); if(t.cat){ cat.style.display='inline-block'; cat.textContent = t.cat; }
        tpl.querySelector('.t-desc').textContent = t.desc || '';
        const dueEl = tpl.querySelector('.due-date'); dueEl.textContent = t.due; if(new Date() > fromISODate(t.due) && !t.done) dueEl.parentElement.classList.add('overdue'); else dueEl.parentElement.classList.remove('overdue');
        const createdAt = new Date(t.createdAt); tpl.querySelector('.created-at').textContent = createdAt.toLocaleString();
        tpl.querySelector('[data-el="age"]').textContent = ageLabel(t.due);
        const status = tpl.querySelector('.status'); status.textContent = t.done? 'Done' : 'Pending';

        // actions
        root.dataset.id = t.id;
        root.addEventListener('click', (e)=>{
          const id = t.id;
          const act = e.target.closest('[data-act]')?.dataset.act;
          if(!act) return;
          if(act==='toggle') toggleTask(id);
          else if(act==='del') delTask(id);
          else if(act==='edit') editTask(id);
          else if(act==='dup') dupTask(id);
        });

        listEl.appendChild(tpl);
      }

      // stats
      const todayTasks = tasks.filter(t=>t.due===todayISO());
      const doneToday = todayTasks.filter(t=>t.done).length;
      const pendingToday = todayTasks.length - doneToday;
      $('#statToday').textContent = todayTasks.length;
      $('#statDone').textContent = doneToday;
      $('#statPending').textContent = pendingToday;
      const rate = todayTasks.length? Math.round((doneToday/todayTasks.length)*100) : 0;
      $('#barFill').style.width = rate+'%';
    }

    // Search debounce
    let tmr = null; $('#searchInput').addEventListener('input', e=>{ clearTimeout(tmr); tmr = setTimeout(()=>{ q = e.target.value.trim(); render(); }, 120); });

    // Tabs
    $$('#tabs .tab').forEach(tab=>{
      tab.addEventListener('click', ()=>{
        $$('#tabs .tab').forEach(x=>x.classList.remove('active'));
        tab.classList.add('active');
        view = tab.dataset.view; render();
      });
    });

    // Add
    $('#addBtn').addEventListener('click', addTask);
    ['titleInput','descInput','dateInput','prioInput','catInput'].forEach(id=>{
      $('#'+id).addEventListener('keydown', e=>{ if(e.key==='Enter' && (id==='titleInput'||id==='descInput')) addTask(); })
    });

    // Clear completed
    $('#clearCompletedBtn').addEventListener('click', ()=>{ if(confirm('Delete all completed tasks?')) clearCompleted(); });

    // Export / Import
    $('#exportBtn').addEventListener('click', ()=>{
      const blob = new Blob([JSON.stringify(tasks,null,2)], {type:'application/json'});
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a'); a.href = url; a.download = `tasks-${todayISO()}.json`; a.click(); URL.revokeObjectURL(url);
    });
    $('#importBtn').addEventListener('click', ()=> $('#importFile').click());
    $('#importFile').addEventListener('change', async (e)=>{
      const file = e.target.files[0]; if(!file) return;
      try{
        const text = await file.text();
        const data = JSON.parse(text);
        if(!Array.isArray(data)) throw new Error('Invalid file');
        if(!confirm('Import will replace your current list. Continue?')) return;
        tasks = data; save(); render(); alert('Imported successfully');
      }catch(err){ alert('Failed to import: '+err.message) }
      e.target.value = '';
    });

    // Report
    $('#reportBtn').addEventListener('click', ()=>{ openReport(); });
    $('#closeReport').addEventListener('click', ()=> $('#reportDlg').close());

    function openReport(){
      const dlg = $('#reportDlg');
      const today = todayISO();
      const createdToday = tasks.filter(t=> t.createdAt && new Date(t.createdAt).toISOString().slice(0,10)===today).length;
      const completedToday = tasks.filter(t=> t.completedAt && new Date(t.completedAt).toISOString().slice(0,10)===today).length;
      const dueTodayPending = tasks.filter(t=> t.due===today && !t.done).length;
      const overdue = tasks.filter(t=> !t.done && fromISODate(t.due) < fromISODate(today)).length;
      const rate = (completedToday + dueTodayPending) ? Math.round((completedToday/(completedToday+dueTodayPending))*100) : 0;

      $('#repDate').textContent = new Date().toLocaleDateString(undefined, {weekday:'long', year:'numeric', month:'short', day:'numeric'});
      $('#repCreated').textContent = createdToday;
      $('#repCompleted').textContent = completedToday;
      $('#repPendingDue').textContent = dueTodayPending;
      $('#repOverdue').textContent = overdue;
      $('#repRate').textContent = rate + '%';

      drawChart();
      dlg.showModal();
    }

    function drawChart(){
      const c = $('#repChart');
      const ctx = c.getContext('2d');
      ctx.clearRect(0,0,c.width,c.height);
      // Gather completions by hour today
      const today = todayISO();
      const hourly = Array(24).fill(0);
      for(const t of tasks){
        if(t.completedAt){
          const d = new Date(t.completedAt);
          if(fmtDate(d)===today){ hourly[d.getHours()]++; }
        }
      }
      // axes
      const padL=30, padB=24, W=c.width, H=c.height;
      const chartW = W - padL - 10, chartH = H - 10 - padB;
      ctx.strokeStyle = 'rgba(255,255,255,0.2)';
      ctx.beginPath(); ctx.moveTo(padL,10); ctx.lineTo(padL,10+chartH); ctx.lineTo(padL+chartW,10+chartH); ctx.stroke();
      const maxV = Math.max(1, ...hourly);
      const barW = chartW/24 - 2;
      for(let h=0; h<24; h++){
        const x = padL + h*(barW+2) + 1;
        const val = hourly[h];
        const hgt = (val/maxV)*chartH;
        const y = 10 + chartH - hgt;
        const g = ctx.createLinearGradient(x,y,x,y+hgt);
        g.addColorStop(0, '#7c7cff');
        g.addColorStop(1, '#5de1e6');
        ctx.fillStyle = g;
        ctx.fillRect(x,y,barW,hgt);
      }
      ctx.fillStyle = 'rgba(255,255,255,0.6)';
      ctx.font = '10px Inter, sans-serif';
      for(let h=0; h<24; h+=3){
        const x = padL + h*(barW+2) + 1;
        ctx.fillText(String(h).padStart(2,'0'), x, 10+chartH+12);
      }
    }

    // init
    render();
  </script>
</body>
</html>
